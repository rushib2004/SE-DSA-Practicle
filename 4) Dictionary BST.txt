#include <iostream>
#include <cstring>
using namespace std;

struct node {
    char kwd[20];
    char meaning[40];
    node *left, *right;
};

class tree {
public:
    node *root;
    tree() {
        root = nullptr;
    }
    void create();
    void insert(node *&, node *);
    void inorder(node *);
    node *search(node *, char[]);
    node *Delete(node *&, char[]);
    int comparisons(node *);
};

void tree::create() {
    char ch;
    do {
        node *temp = new node;
        cout << "Enter keyword: ";
        cin >> temp->kwd;
        cout << "Enter meaning: ";
        cin.ignore();
        cin.getline(temp->meaning, 40);
        temp->left = temp->right = nullptr;
        if (root == nullptr)
            root = temp;
        else
            insert(root, temp);
        cout << "Do you want to continue? (y/n): ";
        cin >> ch;
    } while (ch == 'y' || ch == 'Y');
}

void tree::insert(node *&root, node *temp) {
    if (root == nullptr)
        root = temp;
    else if (strcmp(temp->kwd, root->kwd) < 0)
        insert(root->left, temp);
    else
        insert(root->right, temp);
}

node *tree::Delete(node *&root, char x[]) {
    if (root == nullptr)
        return root;
    if (strcmp(x, root->kwd) < 0)
        root->left = Delete(root->left, x);
    else if (strcmp(x, root->kwd) > 0)
        root->right = Delete(root->right, x);
    else {
        if (root->left == nullptr) {
            node *temp = root->right;
            delete root;
            return temp;
        } else if (root->right == nullptr) {
            node *temp = root->left;
            delete root;
            return temp;
        }
        node *temp = root->right;
        while (temp->left != nullptr)
            temp = temp->left;
        strcpy(root->kwd, temp->kwd);
        strcpy(root->meaning, temp->meaning);
        root->right = Delete(root->right, temp->kwd);
    }
    return root;
}

void tree::inorder(node *root) {
    if (root != nullptr) {
        inorder(root->left);
        cout << " " << root->kwd << "(" << root->meaning << ")";
        inorder(root->right);
    }
}

node *tree::search(node *root, char x[]) {
    while (root != nullptr) {
        if (strcmp(x, root->kwd) == 0)
            return root;
        else if (strcmp(x, root->kwd) < 0)
            root = root->left;
        else
            root = root->right;
    }
    return nullptr;
}

int tree::comparisons(node *root) {
    if (root == nullptr)
        return 0;
    return max(comparisons(root->left), comparisons(root->right)) + 1;
}

int main() {
    tree t1;
    int op;
    char key[20];
    do {
        cout << "\n\n1.Create\n2.Insert";
        cout << "\n3.Update \n4.Inorder Display\n5.Delete\n6.Search\n7.Max Comparisons\n8.Exit";
        cout << "\nEnter Your Choice: ";
        cin >> op;
        switch (op) {
            case 1:
                t1.create();
                break;
            case 2: {
                node *temp = new node;
                cout << "\nEnter a new keyword: ";
                cin >> temp->kwd;
                cout << "Enter meaning of the keyword: ";
                cin.ignore();
                cin.getline(temp->meaning, 40);
                temp->left = temp->right = nullptr;
                t1.insert(t1.root, temp);
                break;
            }
            case 3: {
                cout << "\nEnter a keyword to update: ";
                cin >> key;
                node *temp = t1.search(t1.root, key);
                if (temp == nullptr)
                    cout << "Sorry, No such keyword is found in the dictionary.\n";
                else {
                    cout << "\nEnter new meaning of the keyword: ";
                    cin.ignore();
                    cin.getline(temp->meaning, 40);
                }
                break;
            }
            case 4:
                cout << "\nInorder Display: ";
                t1.inorder(t1.root);
                break;
            case 5: {
                cout << "\nEnter a keyword to delete: ";
                cin >> key;
                t1.Delete(t1.root, key);
                break;
            }
            case 6: {
                cout << "Enter keyword to search: ";
                cin >> key;
                node *temp = t1.search(t1.root, key);
                if (temp == nullptr)
                    cout << "Sorry, No such keyword is found in the dictionary.\n";
                else
                    cout << "\nData Found\n";
                break;
            }
            case 7: {
                int c = t1.comparisons(t1.root);
                cout << "\nMaximum number of comparisons to search any node in this tree is " << c << endl;
                break;
            }
            case 8:
                exit(0);
        }
    } while (op != 8);
    return 0;
}
